pipeline {
    agent any          // nodo con socket Docker

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['test', 'prod'], description: 'Choose the deployment environment')
        string(name: 'RELEASE_VERSION', defaultValue: '1.0.0', description: 'Version of the release')
    }

    environment {
        ARTIFACT_NAME = "myapp-${params.RELEASE_VERSION}.tar.gz"
    }

    triggers {
        cron('0 2 * * *')
    }

    stages {
        stage('Build') {
            steps {
                echo "Building version ${params.RELEASE_VERSION} for environment ${params.DEPLOY_ENV}"
                sh 'echo "Building the application..." > build.txt'
            }
        }

        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    agent {
                        docker {
                            image 'python:3.10'
                            reuseNode true   // usa la stessa workspace
                        }
                    }
                    steps {
                        sh 'python -m unittest test_calc.py'
                    }
                }

                stage('Integration Tests') {
                    agent {
                        docker {
                            image 'python:3.10'
                            reuseNode true
                        }
                    }
                    steps {
                        sh 'echo "Running integration tests..." > integrationTest.log'
                    }
                }
            }
        }

        stage('Dynamic Message') {
            steps {
                script {
                    if (env.BUILD_NUMBER.toInteger() % 2 == 0) {
                        echo "ðŸŸ¢ Even build number: ${env.BUILD_NUMBER}"
                    } else {
                        echo "ðŸ”´ Odd build number: ${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying version ${params.RELEASE_VERSION} to ${params.DEPLOY_ENV}"
                sh 'tar czf $ARTIFACT_NAME build.txt'
                // qui potrai aggiungere docker build/push
            }
        }
    }

    post {
        always  { echo 'Pipeline completed. Cleaning up...' }
        success {
            echo 'âœ” Pipeline succeeded!'
            archiveArtifacts artifacts: ARTIFACT_NAME, allowEmptyArchive: true
        }
        failure { echo 'âœ˜ Pipeline failed!' }
    }
}
