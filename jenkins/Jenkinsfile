pipeline {
    agent any

    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['test', 'prod'], description: 'Choose the deployment environment')
        string(name: 'RELEASE_VERSION', defaultValue: '1.25.0', description: 'Version of the release')
    }

    environment {
        ARTIFACT_NAME = "myapp-${params.RELEASE_VERSION}.tar.gz"
    }

    triggers {
        cron('0 2 * * *') // Runs every day at 2 AM
    }

    stages {
        stage('Build') {
            steps {
                echo "Building version ${params.RELEASE_VERSION} for environment ${params.DEPLOY_ENV}"
                sh 'echo "Building the application..." > build.txt'
            }
        }

        stage('Unit Test') {
            agent {
                docker { image 'python:3.10' }
            }
            steps {
                sh 'PYTHONPATH=sources python3 -m unittest -v sources/test_calc.py 2>&1 | tee unitTest.log'
                stash includes: 'unitTest.log', name: 'test-log'
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    def tag = "${params.RELEASE_VERSION}"
                    sh "docker build -t damiano000/myapp:${tag} ."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh "docker push damiano000/myapp:${tag}"
                    }
                }
            }
        }

        stage('Dynamic Message') {
            steps {
                script {
                    if (env.BUILD_NUMBER.toInteger() % 2 == 0) {
                        echo "ðŸŸ¢ Even build number: ${env.BUILD_NUMBER}"
                    } else {
                        echo "ðŸ”´ Odd build number: ${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying version ${params.RELEASE_VERSION} to ${params.DEPLOY_ENV} environment"
                sh 'tar czf $ARTIFACT_NAME build.txt'
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed. Cleaning up...'
        }
        success {
            echo 'âœ” Pipeline succeeded!'
            unstash 'test-log'
            archiveArtifacts artifacts: ARTIFACT_NAME, allowEmptyArchive: true
            archiveArtifacts artifacts: 'unitTest.log', allowEmptyArchive: true
        }
        failure {
            echo 'âœ˜ Pipeline failed!'
        }
    }
}
